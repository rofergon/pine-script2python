//@version=5
strategy("Scythe Optimizada con Stop Loss Dinámico", overlay=true, initial_capital=1000)

// Parámetros de rango de fechas usando input.time()
startDate = input.time(timestamp("2020-01-01"), "Fecha de Inicio", confirm=true)
finishDate = input.time(timestamp("2025-12-31"), "Fecha de Fin", confirm=true)
time_cond = time >= startDate and time <= finishDate

// Configuración de visualización del rango de fechas
showDateRange = input.bool(true, "Mostrar rango de fechas", group="Visualización")
dateRangeTransp = input.int(95, "Transparencia del rango (%)", minval=0, maxval=100, group="Visualización")
dateRangeColor = input.color(color.new(color.blue, 95), "Color del rango", group="Visualización")

// Parámetros RSI
rsiLength = input.int(14, "Longitud RSI")
rsiOversold = input.int(30, "Nivel RSI Sobrevendido")
rsiOverbought = input.int(70, "Nivel RSI Sobrecomprado")

// Parámetros Stop Loss Dinámico
stopLossPercent = input.float(2.0, "Stop Loss Inicial (%)", minval=0.1)

// Parámetros para entrada en corto mejorada
maxDistancePercent = input.float(0.2, "Distancia máxima a resistencia (%)", minval=0.1)
volumeMultiplier = input.float(1.5, "Multiplicador de volumen", minval=1.0)

// Parámetros para las líneas de soporte y resistencia
// Soporte 1
emaSupp1Length = input.int(20, "Longitud EMA Soporte 1")
emaSupp1Lookback = input.int(50, "Lookback Soporte 1")
emaSupp1Source = input.string("low", "Fuente EMA Soporte 1", options=["close", "high", "low", "open"])

// Soporte 2
emaSupp2Length = input.int(3, "Longitud EMA Soporte 2")
emaSupp2Lookback = input.int(50, "Lookback Soporte 2")
emaSupp2Source = input.string("low", "Fuente EMA Soporte 2", options=["close", "high", "low", "open"])

// Resistencia 1
emaRes1Length = input.int(50, "Longitud EMA Resistencia 1")
emaRes1Lookback = input.int(50, "Lookback Resistencia 1")
emaRes1Source = input.string("high", "Fuente EMA Resistencia 1", options=["close", "high", "low", "open"])

// Resistencia 2
emaRes2Length = input.int(100, "Longitud EMA Resistencia 2")
emaRes2Lookback = input.int(50, "Lookback Resistencia 2")
emaRes2Source = input.string("high", "Fuente EMA Resistencia 2", options=["close", "high", "low", "open"])

// Función para obtener la fuente de datos correcta
getSource(src) =>
    switch src
        "close" => close
        "high"  => high
        "low"   => low
        "open"  => open

// Calcular EMAs y líneas de soporte y resistencia
// Soporte 1
sourceSupp1 = getSource(emaSupp1Source)
emaSupp1 = ta.ema(sourceSupp1, emaSupp1Length)
supportLine1 = ta.lowest(emaSupp1, emaSupp1Lookback)

// Soporte 2
sourceSupp2 = getSource(emaSupp2Source)
emaSupp2 = ta.ema(sourceSupp2, emaSupp2Length)
supportLine2 = ta.lowest(emaSupp2, emaSupp2Lookback)

// Resistencia 1
sourceRes1 = getSource(emaRes1Source)
emaRes1 = ta.ema(sourceRes1, emaRes1Length)
resistanceLine1 = ta.highest(emaRes1, emaRes1Lookback)

// Resistencia 2
sourceRes2 = getSource(emaRes2Source)
emaRes2 = ta.ema(sourceRes2, emaRes2Length)
resistanceLine2 = ta.highest(emaRes2, emaRes2Lookback)

// Calcular RSI
rsi = ta.rsi(close, rsiLength)

// Condiciones mejoradas para entrada en corto
isNearResistance = math.abs(close - resistanceLine1) <= (resistanceLine1 * maxDistancePercent / 100)
hasSellingPressure = close < open and high - close > close - low  // Vela bajista con cierre cerca del mínimo
hasHighVolume = volume > ta.sma(volume, 20) * volumeMultiplier

// Condiciones de entrada y salida
// Long conditions
longCondition = ta.crossover(close, supportLine2) and rsi < rsiOversold and time_cond
longExitCondition = ta.crossunder(close, supportLine1) and rsi > rsiOverbought

// Short conditions (mejoradas)
shortCondition = ta.crossunder(close, resistanceLine1) and 
                 rsi > rsiOverbought and 
                 isNearResistance and 
                 hasSellingPressure and 
                 hasHighVolume and 
                 time_cond

shortExitCondition = ta.crossover(close, resistanceLine2) and rsi < rsiOversold

// Debug plots para ver las condiciones
plotshape(longCondition, title="Long Signal", location=location.belowbar, color=color.green, style=shape.triangleup, size=size.small)
plotshape(shortCondition, title="Short Signal", location=location.abovebar, color=color.red, style=shape.triangledown, size=size.small)

// Variables para seguimiento
var float entryPrice = na
var float stopLossLevel = na
var label entryLabel = na
var string currentPosition = na

// Imprimir información de debug mejorada
if shortCondition
    label.new(bar_index, high + (high * 0.001), 
              "Short\nRSI: " + str.tostring(rsi, "#.##") + 
              "\nPrice: " + str.tostring(close, "#.##") + 
              "\nRes1: " + str.tostring(resistanceLine1, "#.##") +
              "\nVol: " + str.tostring(volume, "#"),
              color=color.red, textcolor=color.white, style=label.style_label_down)

// Gestión de entradas y cambios de dirección
if longCondition
    if strategy.position_size < 0  // Si hay un short abierto, cerrarlo primero
        strategy.close_all("Cerrar Short para abrir Long")
        stopLossLevel := na
        entryPrice := na
        currentPosition := na
        if not na(entryLabel)
            label.delete(entryLabel)
            entryLabel := na
    
    if strategy.position_size == 0  // Ahora abrimos el long
        entryPrice := close
        stopLossLevel := close * (1 - stopLossPercent / 100)
        strategy.entry("Long", strategy.long)
        currentPosition := "long"
        entryLabel := label.new(bar_index, low, 
                               "Entrada Long\nPrecio: " + str.tostring(close, "#.##") +
                               "\nStop: " + str.tostring(stopLossLevel, "#.##"),
                               color=color.green, style=label.style_label_up,
                               textcolor=color.white, size=size.small)

if shortCondition
    if strategy.position_size > 0  // Si hay un long abierto, cerrarlo primero
        strategy.close_all("Cerrar Long para abrir Short")
        stopLossLevel := na
        entryPrice := na
        currentPosition := na
        if not na(entryLabel)
            label.delete(entryLabel)
            entryLabel := na
    
    if strategy.position_size == 0  // Ahora abrimos el short
        entryPrice := close
        stopLossLevel := close * (1 + stopLossPercent / 100)
        strategy.entry("Short", strategy.short)
        currentPosition := "short"
        entryLabel := label.new(bar_index, high,
                               "Entrada Short\nPrecio: " + str.tostring(close, "#.##") +
                               "\nStop: " + str.tostring(stopLossLevel, "#.##"),
                               color=color.red, style=label.style_label_down,
                               textcolor=color.white, size=size.small)

// Actualizar stop loss dinámico (trailing stop)
if strategy.position_size > 0  // Para posiciones largas
    if close > entryPrice and close * (1 - stopLossPercent / 100) > stopLossLevel
        stopLossLevel := close * (1 - stopLossPercent / 100)
        entryPrice := close  // Actualizar precio de referencia para el trailing
else if strategy.position_size < 0  // Para posiciones cortas
    if close < entryPrice and close * (1 + stopLossPercent / 100) < stopLossLevel
        stopLossLevel := close * (1 + stopLossPercent / 100)
        entryPrice := close  // Actualizar precio de referencia para el trailing

// Gestión de salidas
if strategy.position_size != 0
    // Salidas por stop loss
    if currentPosition == "long" and low < stopLossLevel
        strategy.close_all("Stop Loss Hit Long")
        stopLossLevel := na
        entryPrice := na
        currentPosition := na
    if currentPosition == "short" and high > stopLossLevel
        strategy.close_all("Stop Loss Hit Short")
        stopLossLevel := na
        entryPrice := na
        currentPosition := na
    
    // Salidas por señal
    if currentPosition == "long" and longExitCondition
        strategy.close_all("Señal de Salida Long")
        stopLossLevel := na
        entryPrice := na
        currentPosition := na
    if currentPosition == "short" and shortExitCondition
        strategy.close_all("Señal de Salida Short")
        stopLossLevel := na
        entryPrice := na
        currentPosition := na

// Limpiar variables cuando no hay posición
if strategy.position_size == 0
    if not na(entryLabel)
        label.delete(entryLabel)
        entryLabel := na

// Plotear stop loss
plot(strategy.position_size != 0 ? stopLossLevel : na, 
     title="Stop Loss Dinámico", color=color.red, 
     style=plot.style_circles, linewidth=2) 

// Dibujar fondo para el rango de fechas seleccionado
bgcolor(showDateRange and time_cond ? color.new(dateRangeColor, dateRangeTransp) : na, title="Rango de fechas")

// Dibujar líneas de soporte y resistencia
plot(supportLine1, color=color.green, title="Soporte 1")
plot(supportLine2, color=color.lime, title="Soporte 2")
plot(resistanceLine1, color=color.red, title="Resistencia 1")
plot(resistanceLine2, color=color.orange, title="Resistencia 2") 

// Gestión de posiciones fuera del rango de fechas
if (not time_cond)
    strategy.close_all("Fuera de rango de fechas")
    strategy.cancel_all() 